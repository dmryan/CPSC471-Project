// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CarDealershipTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public partial class UIMap
    {
        
        /// <summary>
        /// GUIAddCar_NormalPath - Use 'GUIAddCar_NormalPathParams' to pass parameters into this method.
        /// </summary>
        public void GUIAddCar_NormalPath()
        {
            #region Variable Declarations
            WpfTabPage uIRemoveModifyTabPage = this.UIMainWindowWindow.UITabControl1TabList.UIRemoveModifyTabPage;
            WpfButton uIRemoveButton = this.UIMainWindowWindow.UITabControl1TabList.UIRemoveModifyTabPage.UIRemoveButton;
            WpfEdit uIIDTextEdit = this.UIRemoveWindow.UIIDTextEdit;
            WpfButton uIRemoveButton1 = this.UIRemoveWindow.UIRemoveButton;
            WpfButton uIQuitButton = this.UIRemoveWindow.UIQuitButton;
            WpfTabPage uIAddVehicleTabPage = this.UIMainWindowWindow.UITabControl1TabList.UIAddVehicleTabPage;
            WpfButton uIAddCarButton = this.UIMainWindowWindow.UITabControl1TabList.UIAddVehicleTabPage.UIAddCarButton;
            WpfEdit uIVINTextEdit = this.UIAddCarWindow.UIVINTextEdit;
            WpfEdit uIModelTextEdit = this.UIAddCarWindow.UIModelTextEdit;
            WpfEdit uIYearTextEdit = this.UIAddCarWindow.UIYearTextEdit;
            WpfEdit uIManufacturerTextEdit = this.UIAddCarWindow.UIManufacturerTextEdit;
            WpfEdit uISeatsTextEdit = this.UIAddCarWindow.UISeatsTextEdit;
            WpfEdit uIPriceTextEdit = this.UIAddCarWindow.UIPriceTextEdit;
            WpfEdit uITypeTextEdit = this.UIAddCarWindow.UITypeTextEdit;
            WpfButton uISubmitButton = this.UIAddCarWindow.UISubmitButton;
            WpfButton uICloseButton = this.UIMainWindowWindow.UIMainWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Remove/Modify' tab
            Mouse.Click(uIRemoveModifyTabPage, new Point(72, 13));

            // Click 'Remove' button
            Mouse.Click(uIRemoveButton, new Point(47, 12));

            // Click 'Vehicle' checkbox
            Mouse.Click(UIRemoveWindow.UIVehicleCheckBox, new Point(85, 15));

            // Type '55555' in 'IDText' text box
            uIIDTextEdit.Text = this.GUIAddCar_NormalPathParams.UIIDTextEditText;

            // Click 'Remove' button
            Mouse.Click(uIRemoveButton1, new Point(67, 10));

            // Click 'Quit' button
            Mouse.Click(uIQuitButton, new Point(30, 6));

            // Click 'Add Vehicle' tab
            Mouse.Click(uIAddVehicleTabPage, new Point(62, 7));

            // Click 'Add Car' button
            Mouse.Click(uIAddCarButton, new Point(66, 21));

            // Type '55555' in 'VINText' text box
            uIVINTextEdit.Text = this.GUIAddCar_NormalPathParams.UIVINTextEditText;

            // Type '{Tab}' in 'VINText' text box
            Keyboard.SendKeys(uIVINTextEdit, this.GUIAddCar_NormalPathParams.UIVINTextEditSendKeys, ModifierKeys.None);

            // Type 'guitest' in 'ModelText' text box
            uIModelTextEdit.Text = this.GUIAddCar_NormalPathParams.UIModelTextEditText;

            // Type '{Tab}' in 'ModelText' text box
            Keyboard.SendKeys(uIModelTextEdit, this.GUIAddCar_NormalPathParams.UIModelTextEditSendKeys, ModifierKeys.None);

            // Type '1887' in 'YearText' text box
            uIYearTextEdit.Text = this.GUIAddCar_NormalPathParams.UIYearTextEditText;

            // Type '{Tab}' in 'YearText' text box
            Keyboard.SendKeys(uIYearTextEdit, this.GUIAddCar_NormalPathParams.UIYearTextEditSendKeys, ModifierKeys.None);

            // Type 'aperture science' in 'ManufacturerText' text box
            uIManufacturerTextEdit.Text = this.GUIAddCar_NormalPathParams.UIManufacturerTextEditText;

            // Type '{Tab}' in 'ManufacturerText' text box
            Keyboard.SendKeys(uIManufacturerTextEdit, this.GUIAddCar_NormalPathParams.UIManufacturerTextEditSendKeys, ModifierKeys.None);

            // Type '12' in 'SeatsText' text box
            uISeatsTextEdit.Text = this.GUIAddCar_NormalPathParams.UISeatsTextEditText;

            // Type '{Tab}' in 'SeatsText' text box
            Keyboard.SendKeys(uISeatsTextEdit, this.GUIAddCar_NormalPathParams.UISeatsTextEditSendKeys, ModifierKeys.None);

            // Type '30000.25' in 'PriceText' text box
            uIPriceTextEdit.Text = this.GUIAddCar_NormalPathParams.UIPriceTextEditText;

            // Type '{Tab}' in 'PriceText' text box
            Keyboard.SendKeys(uIPriceTextEdit, this.GUIAddCar_NormalPathParams.UIPriceTextEditSendKeys, ModifierKeys.None);

            // Type 'battering ram' in 'TypeText' text box
            uITypeTextEdit.Text = this.GUIAddCar_NormalPathParams.UITypeTextEditText;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(1, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 12));
        }
        
        /// <summary>
        /// GUIAddTruck_NormalPath - Use 'GUIAddTruck_NormalPathParams' to pass parameters into this method.
        /// </summary>
        public void GUIAddTruck_NormalPath()
        {
            #region Variable Declarations
            WpfTabPage uIRemoveModifyTabPage = this.UIMainWindowWindow.UITabControl1TabList.UIRemoveModifyTabPage;
            WpfButton uIRemoveButton = this.UIMainWindowWindow.UITabControl1TabList.UIRemoveModifyTabPage.UIRemoveButton;
            WpfEdit uIIDTextEdit = this.UIRemoveWindow.UIIDTextEdit;
            WpfButton uIRemoveButton1 = this.UIRemoveWindow.UIRemoveButton;
            WpfButton uIOKButton = this.UIErrorWindowWindow.UIOKButton;
            WpfButton uIQuitButton = this.UIRemoveWindow.UIQuitButton;
            WpfTabPage uIAddVehicleTabPage = this.UIMainWindowWindow.UITabControl1TabList.UIAddVehicleTabPage;
            WpfButton uIAddTruckButton = this.UIMainWindowWindow.UITabControl1TabList.UIAddVehicleTabPage.UIAddTruckButton;
            WpfEdit uIVINTextEdit = this.UIAddTruckWindow.UIVINTextEdit;
            WpfButton uISubmitButton = this.UIAddTruckWindow.UISubmitButton;
            WpfButton uIFindVehicleButton = this.UIMainWindowWindow.UITabControl1TabList.UISearchTabPage.UIFindVehicleButton;
            WpfEdit uIParameter3Edit = this.UISearchWindow.UIParameter3Edit;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Remove/Modify' tab
            Mouse.Click(uIRemoveModifyTabPage, new Point(56, 9));

            // Click 'Remove' button
            Mouse.Click(uIRemoveButton, new Point(57, 15));

            // Type '4' in 'IDText' text box
            Keyboard.SendKeys(uIIDTextEdit, this.GUIAddTruck_NormalPathParams.UIIDTextEditSendKeys, ModifierKeys.None);

            // Click 'Remove' button
            Mouse.Click(uIRemoveButton1, new Point(53, 16));

            // Click 'ok' button
            Mouse.Click(uIOKButton, new Point(22, 3));

            // Click 'Quit' button
            Mouse.Click(uIQuitButton, new Point(40, 15));

            // Click 'Add Vehicle' tab
            Mouse.Click(uIAddVehicleTabPage, new Point(14, 6));

            // Click 'Add Truck' button
            Mouse.Click(uIAddTruckButton, new Point(77, 20));

            // Type '44444' in 'VINText' text box
            uIVINTextEdit.Text = this.GUIAddTruck_NormalPathParams.UIVINTextEditText;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(12, 14));

            // Click 'Find Vehicle' button
            Mouse.Click(uIFindVehicleButton, new Point(109, 17));

            // Type '44444' in 'Parameter3' text box
            uIParameter3Edit.Text = this.GUIAddTruck_NormalPathParams.UIParameter3EditText;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(43, 18));
        }
        
        /// <summary>
        /// GUIAddCar_NormalPath2 - Use 'GUIAddCar_NormalPath2Params' to pass parameters into this method.
        /// </summary>
        public void GUIAddCar_NormalPath2()
        {
            #region Variable Declarations
            WpfTabPage uIRemoveModifyTabPage = this.UIMainWindowWindow.UITabControl1TabList.UIRemoveModifyTabPage;
            WpfButton uIRemoveButton = this.UIMainWindowWindow.UITabControl1TabList.UIRemoveModifyTabPage.UIRemoveButton;
            WpfEdit uIIDTextEdit = this.UIRemoveWindow.UIIDTextEdit;
            WpfButton uIRemoveButton1 = this.UIRemoveWindow.UIRemoveButton;
            WpfButton uIOKButton = this.UIErrorWindowWindow.UIOKButton;
            WpfButton uIQuitButton = this.UIRemoveWindow.UIQuitButton;
            WpfTabPage uIAddVehicleTabPage = this.UIMainWindowWindow.UITabControl1TabList.UIAddVehicleTabPage;
            WpfButton uIAddCarButton = this.UIMainWindowWindow.UITabControl1TabList.UIAddVehicleTabPage.UIAddCarButton;
            WpfEdit uIVINTextEdit = this.UIAddCarWindow.UIVINTextEdit;
            WpfEdit uIModelTextEdit = this.UIAddCarWindow.UIModelTextEdit;
            WpfEdit uIYearTextEdit = this.UIAddCarWindow.UIYearTextEdit;
            WpfEdit uIManufacturerTextEdit = this.UIAddCarWindow.UIManufacturerTextEdit;
            WpfEdit uISeatsTextEdit = this.UIAddCarWindow.UISeatsTextEdit;
            WpfEdit uIPriceTextEdit = this.UIAddCarWindow.UIPriceTextEdit;
            WpfEdit uITypeTextEdit = this.UIAddCarWindow.UITypeTextEdit;
            WpfButton uISubmitButton = this.UIAddCarWindow.UISubmitButton;
            WpfButton uICloseButton = this.UIMainWindowWindow.UIMainWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Remove/Modify' tab
            Mouse.Click(uIRemoveModifyTabPage, new Point(27, 20));

            // Click 'Remove' button
            Mouse.Click(uIRemoveButton, new Point(81, 6));

            // Type '55555' in 'IDText' text box
            uIIDTextEdit.Text = this.GUIAddCar_NormalPath2Params.UIIDTextEditText;

            // Click 'Remove' button
            Mouse.Click(uIRemoveButton1, new Point(66, 9));

            // Click 'ok' button
            Mouse.Click(uIOKButton, new Point(37, 13));

            // Click 'ok' button
            Mouse.Click(uIOKButton, new Point(59, 19));

            // Click 'Quit' button
            Mouse.Click(uIQuitButton, new Point(12, 4));

            // Click 'Add Vehicle' tab
            Mouse.Click(uIAddVehicleTabPage, new Point(72, 12));

            // Click 'Add Car' button
            Mouse.Click(uIAddCarButton, new Point(72, 16));

            // Type '55555' in 'VINText' text box
            uIVINTextEdit.Text = this.GUIAddCar_NormalPath2Params.UIVINTextEditText;

            // Type '{Tab}' in 'VINText' text box
            Keyboard.SendKeys(uIVINTextEdit, this.GUIAddCar_NormalPath2Params.UIVINTextEditSendKeys, ModifierKeys.None);

            // Type 'guitest' in 'ModelText' text box
            uIModelTextEdit.Text = this.GUIAddCar_NormalPath2Params.UIModelTextEditText;

            // Type '{Tab}' in 'ModelText' text box
            Keyboard.SendKeys(uIModelTextEdit, this.GUIAddCar_NormalPath2Params.UIModelTextEditSendKeys, ModifierKeys.None);

            // Type '1887' in 'YearText' text box
            uIYearTextEdit.Text = this.GUIAddCar_NormalPath2Params.UIYearTextEditText;

            // Type '{Tab}' in 'YearText' text box
            Keyboard.SendKeys(uIYearTextEdit, this.GUIAddCar_NormalPath2Params.UIYearTextEditSendKeys, ModifierKeys.None);

            // Type 'aperture science' in 'ManufacturerText' text box
            uIManufacturerTextEdit.Text = this.GUIAddCar_NormalPath2Params.UIManufacturerTextEditText;

            // Type '{Tab}' in 'ManufacturerText' text box
            Keyboard.SendKeys(uIManufacturerTextEdit, this.GUIAddCar_NormalPath2Params.UIManufacturerTextEditSendKeys, ModifierKeys.None);

            // Type '12' in 'SeatsText' text box
            uISeatsTextEdit.Text = this.GUIAddCar_NormalPath2Params.UISeatsTextEditText;

            // Type '{Tab}' in 'SeatsText' text box
            Keyboard.SendKeys(uISeatsTextEdit, this.GUIAddCar_NormalPath2Params.UISeatsTextEditSendKeys, ModifierKeys.None);

            // Type '30000.25' in 'PriceText' text box
            uIPriceTextEdit.Text = this.GUIAddCar_NormalPath2Params.UIPriceTextEditText;

            // Type '{Tab}' in 'PriceText' text box
            Keyboard.SendKeys(uIPriceTextEdit, this.GUIAddCar_NormalPath2Params.UIPriceTextEditSendKeys, ModifierKeys.None);

            // Type 'battering ram' in 'TypeText' text box
            uITypeTextEdit.Text = this.GUIAddCar_NormalPath2Params.UITypeTextEditText;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(24, 4));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 13));
        }
        
        #region Properties
        public virtual GUIAddCar_NormalPathParams GUIAddCar_NormalPathParams
        {
            get
            {
                if ((this.mGUIAddCar_NormalPathParams == null))
                {
                    this.mGUIAddCar_NormalPathParams = new GUIAddCar_NormalPathParams();
                }
                return this.mGUIAddCar_NormalPathParams;
            }
        }
        
        public virtual GUIAddTruck_NormalPathParams GUIAddTruck_NormalPathParams
        {
            get
            {
                if ((this.mGUIAddTruck_NormalPathParams == null))
                {
                    this.mGUIAddTruck_NormalPathParams = new GUIAddTruck_NormalPathParams();
                }
                return this.mGUIAddTruck_NormalPathParams;
            }
        }
        
        public virtual GUIAddCar_NormalPath2Params GUIAddCar_NormalPath2Params
        {
            get
            {
                if ((this.mGUIAddCar_NormalPath2Params == null))
                {
                    this.mGUIAddCar_NormalPath2Params = new GUIAddCar_NormalPath2Params();
                }
                return this.mGUIAddCar_NormalPath2Params;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIRemoveWindow UIRemoveWindow
        {
            get
            {
                if ((this.mUIRemoveWindow == null))
                {
                    this.mUIRemoveWindow = new UIRemoveWindow();
                }
                return this.mUIRemoveWindow;
            }
        }
        
        public UIRemoveWindow1 UIRemoveWindow1
        {
            get
            {
                if ((this.mUIRemoveWindow1 == null))
                {
                    this.mUIRemoveWindow1 = new UIRemoveWindow1();
                }
                return this.mUIRemoveWindow1;
            }
        }
        
        public UIAddCarWindow UIAddCarWindow
        {
            get
            {
                if ((this.mUIAddCarWindow == null))
                {
                    this.mUIAddCarWindow = new UIAddCarWindow();
                }
                return this.mUIAddCarWindow;
            }
        }
        
        public UIErrorWindowWindow UIErrorWindowWindow
        {
            get
            {
                if ((this.mUIErrorWindowWindow == null))
                {
                    this.mUIErrorWindowWindow = new UIErrorWindowWindow();
                }
                return this.mUIErrorWindowWindow;
            }
        }
        
        public UIAddTruckWindow UIAddTruckWindow
        {
            get
            {
                if ((this.mUIAddTruckWindow == null))
                {
                    this.mUIAddTruckWindow = new UIAddTruckWindow();
                }
                return this.mUIAddTruckWindow;
            }
        }
        
        public UISearchWindow UISearchWindow
        {
            get
            {
                if ((this.mUISearchWindow == null))
                {
                    this.mUISearchWindow = new UISearchWindow();
                }
                return this.mUISearchWindow;
            }
        }
        #endregion
        
        #region Fields
        private GUIAddCar_NormalPathParams mGUIAddCar_NormalPathParams;
        
        private GUIAddTruck_NormalPathParams mGUIAddTruck_NormalPathParams;
        
        private GUIAddCar_NormalPath2Params mGUIAddCar_NormalPath2Params;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIRemoveWindow mUIRemoveWindow;
        
        private UIRemoveWindow1 mUIRemoveWindow1;
        
        private UIAddCarWindow mUIAddCarWindow;
        
        private UIErrorWindowWindow mUIErrorWindowWindow;
        
        private UIAddTruckWindow mUIAddTruckWindow;
        
        private UISearchWindow mUISearchWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GUIAddCar_NormalPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class GUIAddCar_NormalPathParams
    {
        
        #region Fields
        /// <summary>
        /// Type '55555' in 'IDText' text box
        /// </summary>
        public string UIIDTextEditText = "55555";
        
        /// <summary>
        /// Type '55555' in 'VINText' text box
        /// </summary>
        public string UIVINTextEditText = "55555";
        
        /// <summary>
        /// Type '{Tab}' in 'VINText' text box
        /// </summary>
        public string UIVINTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'guitest' in 'ModelText' text box
        /// </summary>
        public string UIModelTextEditText = "guitest";
        
        /// <summary>
        /// Type '{Tab}' in 'ModelText' text box
        /// </summary>
        public string UIModelTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1887' in 'YearText' text box
        /// </summary>
        public string UIYearTextEditText = "1887";
        
        /// <summary>
        /// Type '{Tab}' in 'YearText' text box
        /// </summary>
        public string UIYearTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'aperture science' in 'ManufacturerText' text box
        /// </summary>
        public string UIManufacturerTextEditText = "aperture science";
        
        /// <summary>
        /// Type '{Tab}' in 'ManufacturerText' text box
        /// </summary>
        public string UIManufacturerTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '12' in 'SeatsText' text box
        /// </summary>
        public string UISeatsTextEditText = "12";
        
        /// <summary>
        /// Type '{Tab}' in 'SeatsText' text box
        /// </summary>
        public string UISeatsTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '30000.25' in 'PriceText' text box
        /// </summary>
        public string UIPriceTextEditText = "30000.25";
        
        /// <summary>
        /// Type '{Tab}' in 'PriceText' text box
        /// </summary>
        public string UIPriceTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'battering ram' in 'TypeText' text box
        /// </summary>
        public string UITypeTextEditText = "battering ram";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GUIAddTruck_NormalPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class GUIAddTruck_NormalPathParams
    {
        
        #region Fields
        /// <summary>
        /// Type '4' in 'IDText' text box
        /// </summary>
        public string UIIDTextEditSendKeys = "4";
        
        /// <summary>
        /// Type '44444' in 'VINText' text box
        /// </summary>
        public string UIVINTextEditText = "44444";
        
        /// <summary>
        /// Type '44444' in 'Parameter3' text box
        /// </summary>
        public string UIParameter3EditText = "44444";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GUIAddCar_NormalPath2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class GUIAddCar_NormalPath2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '55555' in 'IDText' text box
        /// </summary>
        public string UIIDTextEditText = "55555";
        
        /// <summary>
        /// Type '55555' in 'VINText' text box
        /// </summary>
        public string UIVINTextEditText = "55555";
        
        /// <summary>
        /// Type '{Tab}' in 'VINText' text box
        /// </summary>
        public string UIVINTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'guitest' in 'ModelText' text box
        /// </summary>
        public string UIModelTextEditText = "guitest";
        
        /// <summary>
        /// Type '{Tab}' in 'ModelText' text box
        /// </summary>
        public string UIModelTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1887' in 'YearText' text box
        /// </summary>
        public string UIYearTextEditText = "1887";
        
        /// <summary>
        /// Type '{Tab}' in 'YearText' text box
        /// </summary>
        public string UIYearTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'aperture science' in 'ManufacturerText' text box
        /// </summary>
        public string UIManufacturerTextEditText = "aperture science";
        
        /// <summary>
        /// Type '{Tab}' in 'ManufacturerText' text box
        /// </summary>
        public string UIManufacturerTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '12' in 'SeatsText' text box
        /// </summary>
        public string UISeatsTextEditText = "12";
        
        /// <summary>
        /// Type '{Tab}' in 'SeatsText' text box
        /// </summary>
        public string UISeatsTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '30000.25' in 'PriceText' text box
        /// </summary>
        public string UIPriceTextEditText = "30000.25";
        
        /// <summary>
        /// Type '{Tab}' in 'PriceText' text box
        /// </summary>
        public string UIPriceTextEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'battering ram' in 'TypeText' text box
        /// </summary>
        public string UITypeTextEditText = "battering ram";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UITabControl1TabList UITabControl1TabList
        {
            get
            {
                if ((this.mUITabControl1TabList == null))
                {
                    this.mUITabControl1TabList = new UITabControl1TabList(this);
                }
                return this.mUITabControl1TabList;
            }
        }
        
        public UIMainWindowTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new UIMainWindowTitleBar(this);
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UITabControl1TabList mUITabControl1TabList;
        
        private UIMainWindowTitleBar mUIMainWindowTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITabControl1TabList : WpfTabList
    {
        
        public UITabControl1TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "tabControl1";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIRemoveModifyTabPage UIRemoveModifyTabPage
        {
            get
            {
                if ((this.mUIRemoveModifyTabPage == null))
                {
                    this.mUIRemoveModifyTabPage = new UIRemoveModifyTabPage(this);
                }
                return this.mUIRemoveModifyTabPage;
            }
        }
        
        public UIAddVehicleTabPage UIAddVehicleTabPage
        {
            get
            {
                if ((this.mUIAddVehicleTabPage == null))
                {
                    this.mUIAddVehicleTabPage = new UIAddVehicleTabPage(this);
                }
                return this.mUIAddVehicleTabPage;
            }
        }
        
        public UISearchTabPage UISearchTabPage
        {
            get
            {
                if ((this.mUISearchTabPage == null))
                {
                    this.mUISearchTabPage = new UISearchTabPage(this);
                }
                return this.mUISearchTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRemoveModifyTabPage mUIRemoveModifyTabPage;
        
        private UIAddVehicleTabPage mUIAddVehicleTabPage;
        
        private UISearchTabPage mUISearchTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIRemoveModifyTabPage : WpfTabPage
    {
        
        public UIRemoveModifyTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "tabItem1";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIRemoveButton
        {
            get
            {
                if ((this.mUIRemoveButton == null))
                {
                    this.mUIRemoveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRemoveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button7";
                    this.mUIRemoveButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIRemoveButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIRemoveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIAddVehicleTabPage : WpfTabPage
    {
        
        public UIAddVehicleTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "AddVehicle";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIAddCarButton
        {
            get
            {
                if ((this.mUIAddCarButton == null))
                {
                    this.mUIAddCarButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddCarButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddCarButton";
                    this.mUIAddCarButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIAddCarButton;
            }
        }
        
        public WpfButton UIAddTruckButton
        {
            get
            {
                if ((this.mUIAddTruckButton == null))
                {
                    this.mUIAddTruckButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddTruckButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddTruckButton";
                    this.mUIAddTruckButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIAddTruckButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIAddCarButton;
        
        private WpfButton mUIAddTruckButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISearchTabPage : WpfTabPage
    {
        
        public UISearchTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "Search";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIFindVehicleButton
        {
            get
            {
                if ((this.mUIFindVehicleButton == null))
                {
                    this.mUIFindVehicleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIFindVehicleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "FindVehicleButton";
                    this.mUIFindVehicleButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIFindVehicleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIFindVehicleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMainWindowTitleBar : WpfTitleBar
    {
        
        public UIMainWindowTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIRemoveWindow : WpfWindow
    {
        
        public UIRemoveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Remove";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Remove");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIVehicleCheckBox
        {
            get
            {
                if ((this.mUIVehicleCheckBox == null))
                {
                    this.mUIVehicleCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIVehicleCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "VehicleCheck";
                    this.mUIVehicleCheckBox.WindowTitles.Add("Remove");
                    #endregion
                }
                return this.mUIVehicleCheckBox;
            }
        }
        
        public WpfEdit UIIDTextEdit
        {
            get
            {
                if ((this.mUIIDTextEdit == null))
                {
                    this.mUIIDTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIIDTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "IDText";
                    this.mUIIDTextEdit.WindowTitles.Add("Remove");
                    #endregion
                }
                return this.mUIIDTextEdit;
            }
        }
        
        public WpfButton UIRemoveButton
        {
            get
            {
                if ((this.mUIRemoveButton == null))
                {
                    this.mUIRemoveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRemoveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RemoveButton";
                    this.mUIRemoveButton.WindowTitles.Add("Remove");
                    #endregion
                }
                return this.mUIRemoveButton;
            }
        }
        
        public WpfButton UIQuitButton
        {
            get
            {
                if ((this.mUIQuitButton == null))
                {
                    this.mUIQuitButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIQuitButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "QuitButton";
                    this.mUIQuitButton.WindowTitles.Add("Remove");
                    #endregion
                }
                return this.mUIQuitButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIVehicleCheckBox;
        
        private WpfEdit mUIIDTextEdit;
        
        private WpfButton mUIRemoveButton;
        
        private WpfButton mUIQuitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIRemoveWindow1 : WinWindow
    {
        
        public UIRemoveWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Remove";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Remove");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIAddCarWindow : WpfWindow
    {
        
        public UIAddCarWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "AddCar";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AddCar");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIVINTextEdit
        {
            get
            {
                if ((this.mUIVINTextEdit == null))
                {
                    this.mUIVINTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIVINTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "VINText";
                    this.mUIVINTextEdit.WindowTitles.Add("AddCar");
                    #endregion
                }
                return this.mUIVINTextEdit;
            }
        }
        
        public WpfEdit UIModelTextEdit
        {
            get
            {
                if ((this.mUIModelTextEdit == null))
                {
                    this.mUIModelTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIModelTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ModelText";
                    this.mUIModelTextEdit.WindowTitles.Add("AddCar");
                    #endregion
                }
                return this.mUIModelTextEdit;
            }
        }
        
        public WpfEdit UIYearTextEdit
        {
            get
            {
                if ((this.mUIYearTextEdit == null))
                {
                    this.mUIYearTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIYearTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "YearText";
                    this.mUIYearTextEdit.WindowTitles.Add("AddCar");
                    #endregion
                }
                return this.mUIYearTextEdit;
            }
        }
        
        public WpfEdit UIManufacturerTextEdit
        {
            get
            {
                if ((this.mUIManufacturerTextEdit == null))
                {
                    this.mUIManufacturerTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIManufacturerTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ManufacturerText";
                    this.mUIManufacturerTextEdit.WindowTitles.Add("AddCar");
                    #endregion
                }
                return this.mUIManufacturerTextEdit;
            }
        }
        
        public WpfEdit UISeatsTextEdit
        {
            get
            {
                if ((this.mUISeatsTextEdit == null))
                {
                    this.mUISeatsTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUISeatsTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SeatsText";
                    this.mUISeatsTextEdit.WindowTitles.Add("AddCar");
                    #endregion
                }
                return this.mUISeatsTextEdit;
            }
        }
        
        public WpfEdit UIPriceTextEdit
        {
            get
            {
                if ((this.mUIPriceTextEdit == null))
                {
                    this.mUIPriceTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPriceTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PriceText";
                    this.mUIPriceTextEdit.WindowTitles.Add("AddCar");
                    #endregion
                }
                return this.mUIPriceTextEdit;
            }
        }
        
        public WpfEdit UITypeTextEdit
        {
            get
            {
                if ((this.mUITypeTextEdit == null))
                {
                    this.mUITypeTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITypeTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TypeText";
                    this.mUITypeTextEdit.WindowTitles.Add("AddCar");
                    #endregion
                }
                return this.mUITypeTextEdit;
            }
        }
        
        public WpfButton UISubmitButton
        {
            get
            {
                if ((this.mUISubmitButton == null))
                {
                    this.mUISubmitButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISubmitButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddCarSubmit";
                    this.mUISubmitButton.WindowTitles.Add("AddCar");
                    #endregion
                }
                return this.mUISubmitButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIVINTextEdit;
        
        private WpfEdit mUIModelTextEdit;
        
        private WpfEdit mUIYearTextEdit;
        
        private WpfEdit mUIManufacturerTextEdit;
        
        private WpfEdit mUISeatsTextEdit;
        
        private WpfEdit mUIPriceTextEdit;
        
        private WpfEdit mUITypeTextEdit;
        
        private WpfButton mUISubmitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIErrorWindowWindow : WpfWindow
    {
        
        public UIErrorWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "ErrorWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ErrorWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUIOKButton.WindowTitles.Add("ErrorWindow");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIAddTruckWindow : WpfWindow
    {
        
        public UIAddTruckWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "AddTruck";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AddTruck");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIVINTextEdit
        {
            get
            {
                if ((this.mUIVINTextEdit == null))
                {
                    this.mUIVINTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIVINTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "VINText";
                    this.mUIVINTextEdit.WindowTitles.Add("AddTruck");
                    #endregion
                }
                return this.mUIVINTextEdit;
            }
        }
        
        public WpfButton UISubmitButton
        {
            get
            {
                if ((this.mUISubmitButton == null))
                {
                    this.mUISubmitButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISubmitButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddTruckSubmit";
                    this.mUISubmitButton.WindowTitles.Add("AddTruck");
                    #endregion
                }
                return this.mUISubmitButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIVINTextEdit;
        
        private WpfButton mUISubmitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISearchWindow : WpfWindow
    {
        
        public UISearchWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Search";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Search");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIParameter3Edit
        {
            get
            {
                if ((this.mUIParameter3Edit == null))
                {
                    this.mUIParameter3Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIParameter3Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Parameter3";
                    this.mUIParameter3Edit.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIParameter3Edit;
            }
        }
        
        public WpfButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUISearchButton.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIParameter3Edit;
        
        private WpfButton mUISearchButton;
        #endregion
    }
}
